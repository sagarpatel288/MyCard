package com.creativeconflux.srdp.mycard.ui.dialogs;

import android.app.DialogFragment;
import android.content.Intent;
import android.graphics.Bitmap;
import android.media.MediaScannerConnection;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.annotation.Nullable;
import android.support.v7.graphics.Palette;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import android.widget.Toast;

import com.creativeconflux.srdp.mycard.R;
import com.creativeconflux.srdp.mycard.listeners.OnSelectImageListener;
import com.creativeconflux.srdp.mycard.utils.AppConstants;
import com.creativeconflux.srdp.mycard.utils.IntentKeys;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Calendar;

import static android.app.Activity.RESULT_OK;

/**
 * Created by srdpatel on 2/25/2018.
 */

public class MyDialogFrag extends DialogFragment implements View.OnClickListener {

    //region Compile time UI Variables
    TextView tvGallery;
    TextView tvCamera;
    TextView tvCancel;
    //endregion

    //region Listeners
    OnSelectImageListener onSelectImageListener;
    //endregion

    //region Class variables
    private String imagePath;
    private Palette palette;
    //endregion

    public OnSelectImageListener getOnSelectImageListener() {
        return onSelectImageListener;
    }

    public void setOnSelectImageListener(OnSelectImageListener onSelectImageListener) {
        this.onSelectImageListener = onSelectImageListener;
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK) {
            if (requestCode == AppConstants.REQUEST_CAMERA) {
                Bitmap bitmap = (Bitmap) data.getExtras().get(getString(R.string.intent_data));
                if (onSelectImageListener != null) {
                    onSelectImageListener.onSelectImage(bitmap);
                }
            } else if (requestCode == AppConstants.REQUEST_GALLERY) {
                if (data != null) {
                    Uri contentUri = data.getData();
                    if (contentUri != null) {
                        try {
                            Bitmap bitmap = MediaStore.Images.Media.getBitmap(
                                    getActivity().getContentResolver(), contentUri);
                            if (bitmap != null && onSelectImageListener != null) {
                                createPaletteSync(bitmap);
                                Intent intent = new Intent();
                                intent.putExtra(IntentKeys.STRING_IMAGE_PATH,
                                        saveImage(bitmap));
                                intent.putExtra(IntentKeys.INT_COLOR_TOOLBAR_BG,
                                        getVibrantSwatch(getPalette()).getRgb());
                                intent.putExtra(IntentKeys.INT_COLOR_TOOLBAR_TITLE,
                                        getVibrantSwatch(getPalette()).getTitleTextColor());
                                intent.putExtra(IntentKeys.INT_COLOR_TITLE,
                                        getLightVibrantSwatch(getPalette()).getTitleTextColor());
                                intent.putExtra(IntentKeys.INT_COLOR_HEADER,
                                        getVibrantSwatch(getPalette()).getTitleTextColor());
                                intent.putExtra(IntentKeys.INT_COLOR_FOOTER,
                                        getVibrantSwatch(getPalette()).getTitleTextColor());
                                onSelectImageListener.onSelectImage(intent);
                            }
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        }
    }

    private Palette createPaletteSync(Bitmap bitmap) {
        setPalette(Palette.from(bitmap).generate());
        return getPalette();
    }

    private String saveImage(Bitmap bitmap) {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        bitmap.compress(Bitmap.CompressFormat.PNG, 90, byteArrayOutputStream);

        File myFolder = new File(Environment.getExternalStorageDirectory() + AppConstants.DIR_APP
                + AppConstants.DIR_APP_IMAGES);
        if (!myFolder.exists()) {
            myFolder.mkdirs();
        }

        try {
            File f = new File(myFolder, Calendar.getInstance().getTimeInMillis() + ".PNG");
            f.createNewFile();
            FileOutputStream fileOutputStream = new FileOutputStream(f);
            fileOutputStream.write(byteArrayOutputStream.toByteArray());

            MediaScannerConnection.scanFile(getActivity(), new String[]{f.getPath()},
                    new String[]{"image/*"}, null);

            fileOutputStream.close();
            Toast.makeText(getActivity(),
                    String.format("%s, %s", getString(R.string.toast_msg_file_saved_to), f.getAbsolutePath()),
                    Toast.LENGTH_SHORT).show();
            imagePath = f.getAbsolutePath();

        } catch (IOException e) {
            e.printStackTrace();
        }
        return imagePath;
    }

    private Palette.Swatch getVibrantSwatch(Palette palette) {
        return palette.getVibrantSwatch();
    }

    public Palette getPalette() {
        return palette;
    }

    public void setPalette(Palette palette) {
        this.palette = palette;
    }

    private Palette.Swatch getLightVibrantSwatch(Palette palette) {
        return palette.getLightVibrantSwatch();
    }

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.dialog_image_selection, container);
        tvGallery = view.findViewById(R.id.tv_from_gallery);
        tvCamera = view.findViewById(R.id.tv_by_camera);
        tvCancel = view.findViewById(R.id.tv_cancel);
        tvGallery.setOnClickListener(this);
        tvCamera.setOnClickListener(this);
        tvCancel.setOnClickListener(this);
        return view;
    }

    private Palette.Swatch getLightMutedSwatch(Palette palette) {
        return palette.getLightMutedSwatch();
    }

    private Palette.Swatch getDominantSwatch(Palette palette) {
        return palette.getDominantSwatch();
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.tv_from_gallery:
                openGallery();
                break;

            case R.id.tv_by_camera:
                openCamera();
                break;

            case R.id.tv_cancel:
                dismiss();
                break;
        }
    }

    private void openGallery() {
        Intent intent = new Intent(Intent.ACTION_PICK,
                MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
        startActivityForResult(intent, AppConstants.REQUEST_GALLERY);
    }

    private void openCamera() {
        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        startActivityForResult(intent, AppConstants.REQUEST_CAMERA);
    }
}
