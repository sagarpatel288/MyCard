package com.creativeconflux.srdp.mycard.ui.fragments;


import android.Manifest;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import android.provider.Settings;
import android.support.design.widget.TextInputEditText;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v7.app.AlertDialog;
import android.support.v7.graphics.Palette;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.Toast;

import com.bumptech.glide.Glide;
import com.bumptech.glide.request.RequestOptions;
import com.creativeconflux.srdp.mycard.R;
import com.creativeconflux.srdp.mycard.listeners.OnSelectImageListener;
import com.creativeconflux.srdp.mycard.ui.activities.MainActivity;
import com.creativeconflux.srdp.mycard.ui.dialogs.MyDialogFrag;
import com.creativeconflux.srdp.mycard.utils.AppConstants;
import com.creativeconflux.srdp.mycard.utils.IntentKeys;
import com.creativeconflux.srdp.mycard.utils.PrefKeys;

import java.util.ArrayList;
import java.util.List;

import static com.creativeconflux.srdp.mycard.utils.AppConstants.REQUEST_PERMISSION_SETTINGS;
import static com.creativeconflux.srdp.mycard.utils.SharedPref.getEditor;
import static com.creativeconflux.srdp.mycard.utils.SharedPref.getSharedPref;

/**
 * A simple {@link Fragment} subclass.
 */
public class EditFragment extends Fragment implements OnSelectImageListener {

    //region Compile time UI Variables
    private TextInputEditText tietTitle;
    private TextInputEditText tietHeader;
    private TextInputEditText tietFooter;
    private ImageView ivBackground;
    //endregion

    //region Class Variables
    private Context mContext;
    private String[] permissions = new String[]{Manifest.permission.CAMERA,
            Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE};
    private boolean sentToSettings;
    private String imagePath;
    //region Runtime UI Variables

    private MyDialogFrag myDialogFrag;

    public EditFragment() {
        // Required empty public constructor
    }
    //endregion

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == REQUEST_PERMISSION_SETTINGS) {
            if (allPermissionsGranted()) {
                //Got Permission
                showDialogForImage();
            }
        }
    }
    //endregion

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        setHasOptionsMenu(true);
        View view = inflater.inflate(R.layout.fragment_add_edit, container, false);
        mContext = view.getContext();
        setViews(view);
        return view;
    }

    private void setViews(View view) {
        Button btnSelectImage = view.findViewById(R.id.btn_select_background);
        tietTitle = view.findViewById(R.id.tiet_title);
        tietHeader = view.findViewById(R.id.tiet_header);
        tietFooter = view.findViewById(R.id.tiet_footer);
        ivBackground = view.findViewById(R.id.iv);
        setOnClickListener(btnSelectImage);
    }

    private void setOnClickListener(View view) {
        view.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (allPermissionsGranted()) {
                    showDialogForImage();
                }
            }
        });
    }

    @Override
    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        menu.findItem(R.id.menu_item_save).setVisible(true);
        menu.findItem(R.id.menu_item_edit).setVisible(false);
        super.onCreateOptionsMenu(menu, inflater);
    }

    @Override
    public void onPrepareOptionsMenu(Menu menu) {
        super.onPrepareOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.menu_item_save:
                if (isValid()) {
                    Bundle bundle = new Bundle();
                    bundle.putString(IntentKeys.STRING_HEADING_CARD, tietTitle.getText().toString());
                    bundle.putString(IntentKeys.STRING_FROM, tietHeader.getText().toString());
                    bundle.putString(IntentKeys.STRING_TO, tietFooter.getText().toString());
                    if (imagePath != null) {
                        bundle.putString(IntentKeys.STRING_IMAGE_PATH, imagePath);
                    }
                    ((MainActivity) getActivity()).commitFragmentTransaction(new CardFragment(), true, bundle);

                }
                break;
        }
        return true;
    }

    private boolean isValid() {
        if (tietTitle.getText().toString().isEmpty()) {
            Toast.makeText(mContext, getString(R.string.error_empty_heading), Toast.LENGTH_SHORT).show();
            return false;
        } else if (tietHeader.getText().toString().isEmpty()) {
            Toast.makeText(mContext, getString(R.string.error_empty_from), Toast.LENGTH_SHORT).show();
            return false;
        } else if (tietFooter.getText().toString().isEmpty()) {
            Toast.makeText(mContext, getString(R.string.error_empty_to), Toast.LENGTH_SHORT).show();
            return false;
        } else if (imagePath == null) {
            Toast.makeText(mContext, getString(R.string.error_empty_background), Toast.LENGTH_SHORT).show();
            return false;
        }
        return true;
    }

    private boolean allPermissionsGranted() {
        //Check if permission has granted or not
        if (!checkPermissions(permissions)) {
            //Check if permission has denied with or without "don't ask again" option
            //If "don't ask again" was not checked, show reason for permission
            if (shouldShowRational(permissions)) {
                showPermissionReason();
                //If "don't ask again" was checked, show dialog to redirect to permission settings
            } else if (getSharedPref(mContext).getBoolean(PrefKeys.ALREADY_ASKED_PERMISSION, false)) {
                redirectToSettings();
                //Otherwise, it is very first time the permission dialog is going to be opened
            } else {
                askForPermission();
            }
            //Store that we have already asked for permission despite of what user has granted and what not
            getEditor(mContext).putBoolean(PrefKeys.ALREADY_ASKED_PERMISSION, true);
            getEditor(mContext).apply();
            return false;

        } else {
            return true;
        }
    }

    private void showDialogForImage() {
        myDialogFrag = new MyDialogFrag();
        myDialogFrag.setOnSelectImageListener(this);
        myDialogFrag.show(getActivity().getFragmentManager(), getString(R.string.dialog_img));
    }

    private boolean checkPermissions(String[] permissions) {
        for (int i = 0; i < permissions.length - 1; i++) {
            if (ActivityCompat.checkSelfPermission(mContext, permissions[i]) != PackageManager.PERMISSION_GRANTED) {
                return false;
            }
        }
        return true;
    }

    private boolean shouldShowRational(String[] permissions) {

        List<String> nonGranted = new ArrayList<>();

        for (int i = 0; i < permissions.length - 1; i++) {
            if (ActivityCompat.checkSelfPermission(mContext, permissions[i]) != PackageManager.PERMISSION_GRANTED) {
                nonGranted.add(permissions[i]);
            }
        }

        String[] permissionsToCheck = (String[]) nonGranted.toArray(new String[0]);

        for (int i = 0; i < permissionsToCheck.length - 1; i++) {
            if (!shouldShowRequestPermissionRationale(permissionsToCheck[i])) {
                return false;
            }
        }
        return true;
    }

    private void showPermissionReason() {
        AlertDialog.Builder builder = new AlertDialog.Builder(mContext);
        builder.setTitle(getString(R.string.title_dialog_permission));
        builder.setMessage(getString(R.string.des_permission));
        builder.setPositiveButton(getString(R.string.label_grant), new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.cancel();
                askForPermission();
            }
        });
        builder.setNegativeButton(getString(R.string.label_cancel), new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.cancel();
            }
        });
        builder.show();
    }

    private void redirectToSettings() {
        AlertDialog.Builder builder = new AlertDialog.Builder(mContext);
        builder.setTitle(getString(R.string.title_dialog_permission));
        builder.setMessage(getString(R.string.des_permission));
        builder.setPositiveButton(getString(R.string.label_grant), new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.cancel();
                sentToSettings = true;
                Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
                Uri uri = Uri.fromParts(getString(R.string.scheme_package), mContext.getPackageName(), null);
                intent.setData(uri);
                startActivityForResult(intent, REQUEST_PERMISSION_SETTINGS);
            }
        });
        builder.setNegativeButton(getString(R.string.label_cancel), new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.cancel();
            }
        });
        builder.show();
    }

    private void askForPermission() {
        List<String> nonGranted = new ArrayList<>();
        for (int i = 0; i < permissions.length - 1; i++) {
            if (ActivityCompat.checkSelfPermission(mContext, permissions[i]) != PackageManager.PERMISSION_GRANTED) {
                nonGranted.add(permissions[i]);
            }
        }
        String[] permissions = (String[]) nonGranted.toArray(new String[0]);
        requestPermissions(permissions, AppConstants.REQUEST_PERMISSION_CALLBACK);
    }

    @Override
    public void onSelectImage(Bitmap bitmap) {
        myDialogFrag.dismiss();
        Glide.with(EditFragment.this)
                .load(bitmap)
                .thumbnail(0.50f)
                .apply(new RequestOptions().centerCrop())
                .into(ivBackground);
        saveImage(bitmap);
        setToolbar(bitmap);
        setTextColors(bitmap);
    }

    private void setToolbar(Bitmap bitmap) {
        if (((MainActivity) getActivity()) != null && ((MainActivity) getActivity()).getToolbar() != null) {
            Palette palette = createPaletteSync(bitmap);
            Palette.Swatch swatch = getVibrantSwatch(palette);
            ((MainActivity) getActivity()).getToolbar().setBackgroundColor(swatch.getRgb());
            ((MainActivity) getActivity()).getToolbar().setTitleTextColor(swatch.getTitleTextColor());
        }
    }

    private void setTextColors(Bitmap bitmap) {

        tietTitle.setTextColor(getVibrantSwatch(getPalette()).getTitleTextColor());
        tietHeader.setTextColor(getLightMutedSwatch(getPalette()).getTitleTextColor());
        tietFooter.setTextColor(getDominantSwatch(getPalette()).getBodyTextColor());
    }
}
